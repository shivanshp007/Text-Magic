{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","mystyle","setMyStyle","useState","color","backgroundColor","btnText","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","toggleStyle","Alert","props","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalized","msg","data-bs-dismiss","aria-label","Navbar","mode","href","title","Link","aria-current","to","aboutText","toggleMode","htmlFor","placeholder","TextForm","text","setText","Fragment","heading","value","onChange","event","console","log","target","rows","handleUpClick","upperText","showAlert","handleToLower","LowerText","handleToCopy","myBoxText","document","getElementById","select","navigator","clipboard","writeText","handleToExtraSpace","newText","split","join","handleToClear","trim","length","match","defaultProps","App","setMode","setAlert","message","setTimeout","Router","body","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c77d9b76.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle, setMyStyle] = useState( {   // make useState for style\r\n        color: 'white',\r\n        backgroundColor : 'black'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Light Mode\")   // useState for Button \r\n\r\n    const toggleStyle = () =>{\r\n        if(mystyle.color === 'white'){\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor : 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }else{\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor : 'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n\r\n    }\r\n\r\n     \r\n    return (\r\n        <div className='container' style ={mystyle}>\r\n            <h1 className='my-3'>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\" style ={mystyle}>\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" style ={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style ={mystyle}>\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style ={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style ={mystyle}>\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style ={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-2  \">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n     // props.alert if null then it will show error if props.alert is not null then div will run \r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalized(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    \r\n  )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\n\r\nexport default function Navbar(props) {   // we are passing props to use data/properties...\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        {/* <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button> */}\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}Us</Link>\r\n            </li>\r\n\r\n          </ul>         \r\n          <div className={`form-check form-switch text-${props.mode ==='light'? 'dark' : 'light'}`}>  {/* // Switch Dark mode */}\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"switchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"switchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n          <form className=\"d-flex mx-3\" role=\"search\">\r\n            <input className=\"form-control me-4 \" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string, // * PropTypes.string.isRequired * use for mandatatory to have any title \r\n  aboutText: PropTypes.string\r\n} // It will handle props which should be only string otherwise we will get errors\r\n\r\nNavbar.defaultProps = {     // ---- Not working, need to check ----- //\r\n  title: 'React-Default',\r\n  aboutText: 'About_Default'\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"  \"); // // create useState for text\r\n\r\n    const handleUpClick = () => {\r\n\r\n        let upperText = text.toUpperCase();\r\n        setText(upperText); // after clicking the button text will change...\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n    const handleToLower = () => {\r\n\r\n        let LowerText = text.toLowerCase();\r\n        setText(LowerText); // after clicking the button text will change...\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n    const handleToClear = () => {\r\n        let clear = '';   // Clear the Text Box \r\n        setText(clear);\r\n        props.showAlert(\"Cleared All Text\", \"success\");\r\n    }\r\n    const handleToCopy = () => {\r\n        let myBoxText = document.getElementById(\"myBox\");\r\n        myBoxText.select(); // select all text of the the myBox textArea\r\n        navigator.clipboard.writeText(myBoxText.value); // main function to copy your text in your clipboard \r\n        props.showAlert(\"Copy to Clipboard\", \"success\");\r\n    }\r\n    const handleToExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On Changed\");\r\n        setText(event.target.value);        // when i click on button then in textArea have onChange function always run so i need to handle\r\n    }\r\n\r\n\r\n    // text = \"new text\";            // wrong way to change the state of (text) we need to use setText function\r\n    // setText(\"New Text\");           // Right way to change the state \r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{backgroundColor:props.mode ==='dark'? '#042743' : 'white' ,color:props.mode==='dark'?'white':'black'}}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode ==='dark'? '#042743' : 'white', color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"7\"></textarea>\r\n                </div>\r\n                <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className='btn btn-primary mx-2' onClick={handleToLower}>Convert to Lowercase</button>\r\n                <button className='btn btn-primary mx-2' onClick={handleToCopy}>Copy Text</button>\r\n                <button className='btn btn-primary mx-2' onClick={handleToExtraSpace}>Remove Extra Space</button>\r\n                <button className='btn btn-primary mx-2' onClick={handleToClear}>Reset Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{backgroundColor:props.mode ==='dark'? '#042743' : 'white' ,color:props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your Text Summary</h2>\r\n                {/* <p> {text.split(\" \").length} Words | {text.length} Characters | {text.split(\".\").length-1} Sentence </p> */}\r\n                <p>\r\n                    {text.trim().split(/\\s+/).length} Words | {text.length} Characters | {(text.match(/\\.\\s+|\\.$/g) || []).length} Sentences\r\n                </p>\r\n\r\n                <p>{(0.008 * text.split(\" \").length)*60} sec need to read this summary</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter your text in above text box to preview here...'}</p>\r\n            </div>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\n \n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextMagic - Dark Mode'; // change the title name after clicking\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n     // document.title = 'TextMagic - Light Mode';\n    }\n\n  }\n   const [alert, setAlert] = useState( null);\n   const showAlert = (message, type) =>{\n      setAlert({\n        msg:message,\n        type: type\n      })\n      setTimeout(() => {   // after 1.5 sec alert will be desabled... \n        setAlert(null);\n      }, 2000);\n   }\n\n  return (\n    <>\n      <Router>\n      <Navbar title = \"TextMagic\" aboutText= \"About \" mode={mode}  toggleMode= {toggleMode}/>\n        <Alert alert = {alert}/>\n          <div className=\"container\">\n                    <Switch>\n                    <Route exact path=\"/about\">  {/* exact is used for when its get exact path then it will render .*/} \n                      <About />\n                    </Route>\n                     \n                    <Route exact path=\"/\">  {/* like /user & /user/home  are two path maybe its create confusion  */}\n                    <TextForm heading = \"Enter Your Text To Analize Below\" showAlert={showAlert} mode={mode}/>\n                    </Route>\n                  </Switch>\n           \n          </div>\n                  </Router>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}